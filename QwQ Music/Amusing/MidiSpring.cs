using System.Linq;
using System.Threading.Tasks;
using Commons.Music.Midi;

namespace QwQ_Music.Amusing;

public enum Scale
{
    Rest = 0,
    C8 = 108,
    B7 = 107,
    A7S = 106,
    A7 = 105,
    G7S = 104,
    G7 = 103,
    F7S = 102,
    F7 = 101,
    E7 = 100,
    D7S = 99,
    D7 = 98,
    C7S = 97,
    C7 = 96,
    B6 = 95,
    A6S = 94,
    A6 = 93,
    G6S = 92,
    G6 = 91,
    F6S = 90,
    F6 = 89,
    E6 = 88,
    D6S = 87,
    D6 = 86,
    C6S = 85,
    C6 = 84,
    B5 = 83,
    A5S = 82,
    A5 = 81,
    G5S = 80,
    G5 = 79,
    F5S = 78,
    F5 = 77,
    E5 = 76,
    D5S = 75,
    D5 = 74,
    C5S = 73,
    C5 = 72,
    B4 = 71,
    A4S = 70,
    A4 = 69,
    G4S = 68,
    G4 = 67,
    F4S = 66,
    F4 = 65,
    E4 = 64,
    D4S = 63,
    D4 = 62,
    C4S = 61,
    C4 = 60,
    B3 = 59,
    A3S = 58,
    A3 = 57,
    G3S = 56,
    G3 = 55,
    F3S = 54,
    F3 = 53,
    E3 = 52,
    D3S = 51,
    D3 = 50,
    C3S = 49,
    C3 = 48,
    B2 = 47,
    A2S = 46,
    A2 = 45,
    G2S = 44,
    G2 = 43,
    F2S = 42,
    F2 = 41,
    E2 = 40,
    D2S = 39,
    D2 = 38,
    C2S = 37,
    C2 = 36,
    B1 = 35,
    A1S = 34,
    A1 = 33,
    G1S = 32,
    G1 = 31,
    F1S = 30,
    F1 = 29,
    E1 = 28,
    D1S = 27,
    D1 = 26,
    C1S = 25,
    C1 = 24,
    B0 = 23,
    A0S = 22,
    A0 = 21,
}

public enum Voice
{
    X1 = Scale.C2,
    X2 = Scale.D2,
    X3 = Scale.E2,
    X4 = Scale.F2,
    X5 = Scale.G2,
    X6 = Scale.A2,
    X7 = Scale.B2,
    L1 = Scale.C3,
    L2 = Scale.D3,
    L3 = Scale.E3,
    L4 = Scale.F3,
    L5 = Scale.G3,
    L6 = Scale.A3,
    L7 = Scale.B3,
    M1 = Scale.C4,
    M2 = Scale.D4,
    M3 = Scale.E4,
    M4 = Scale.F4,
    M5 = Scale.G4,
    M6 = Scale.A4,
    M7 = Scale.B4,
    H1 = Scale.C5,
    H2 = Scale.D5,
    H3 = Scale.E5,
    H4 = Scale.F5,
    H5 = Scale.G5,
    H6 = Scale.A5,
    H7 = Scale.B5,
    LowSpeed = 500,
    MiddleSpeed = 400,
    HighSpeed = 300,
    _ = 0xFF,
}

public static class MidiSpring
{
    public static async Task Spring()
    {
        var access = MidiAccessManager.Default;
        var output = access.OpenOutputAsync(access.Outputs.Last().Id).Result;

        // 设置乐器为钢琴
        output.Send([0xC0, GeneralMidi.Instruments.AcousticGrandPiano], 0, 2, 0);

        const int volume = 0x7f;
        int tmp = 5;
        int sleep = 300;

        int[] spring =
        [
            (int)Voice.H3,
            (int)Voice._,
            (int)Voice.H2,
            (int)Voice.H1,
            (int)Voice._,
            (int)Voice.H2,
            (int)Voice.H3,
            700,
            0,
            (int)Voice.H4,
            300,
            (int)Voice.H3,
            300,
            (int)Voice.H2,
            700,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.H3,
            (int)Voice._,
            (int)Voice.H2,
            (int)Voice.H1,
            (int)Voice._,
            (int)Voice.H2,
            (int)Voice.H3,
            700,
            0,
            (int)Voice.H4,
            300,
            (int)Voice.H3,
            300,
            (int)Voice.H2,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.H3,
            (int)Voice._,
            (int)Voice.H2,
            (int)Voice.H1,
            (int)Voice._,
            (int)Voice.H2,
            (int)Voice.H3,
            700,
            0,
            (int)Voice.H4,
            300,
            (int)Voice.H3,
            300,
            (int)Voice.H2,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.H3,
            (int)Voice._,
            (int)Voice.H2,
            (int)Voice.H1,
            (int)Voice._,
            (int)Voice.H2,
            (int)Voice.H3,
            700,
            0,
            (int)Voice.H4,
            300,
            (int)Voice.H3,
            300,
            (int)Voice.H2,
            (int)Voice._,
            (int)Voice._,
            0,
            (int)Voice.M1,
            (int)Voice.M1,
            300,
            (int)Voice.M3,
            (int)Voice.M3,
            300,
            (int)Voice.M2,
            700,
            (int)Voice.M4,
            (int)Voice.M3,
            (int)Voice.M2,
            (int)Voice.M2,
            (int)Voice.M2,
            0,
            (int)Voice.M1,
            (int)Voice.M1,
            300,
            (int)Voice.M4,
            300,
            (int)Voice.M3,
            (int)Voice.M2,
            (int)Voice.M2,
            (int)Voice._,
            0,
            (int)Voice.M1,
            (int)Voice.M2,
            (int)Voice.M3,
            300,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.M3,
            (int)Voice.M5,
            (int)Voice.H1,
            (int)Voice.M7,
            (int)Voice._,
            (int)Voice.H1,
            (int)Voice.M7,
            (int)Voice._,
            (int)Voice.H1,
            0,
            (int)Voice.M7,
            (int)Voice.M6,
            (int)Voice.M5,
            300,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.M5,
            (int)Voice.M2,
            (int)Voice.M4,
            (int)Voice.M4,
            (int)Voice._,
            (int)Voice.M3,
            (int)Voice.M3,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.L5,
            (int)Voice.M4,
            (int)Voice.M3,
            (int)Voice.M2,
            (int)Voice.M3,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.M5,
            (int)Voice.M1,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.M1,
            (int)Voice.M2,
            (int)Voice.M1,
            700,
            0,
            (int)Voice.L7,
            300,
            (int)Voice.M1,
            300,
            (int)Voice.M5,
            (int)Voice.M1,
            (int)Voice.M4,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.M3,
            (int)Voice.M2,
            (int)Voice.M1,
            (int)Voice.M1,
            (int)Voice.M1,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            0,
            (int)Voice.M1,
            0,
            (int)Voice.M2,
            300,
            (int)Voice.M3,
            (int)Voice.M3,
            (int)Voice.M2,
            (int)Voice.M4,
            (int)Voice.M3,
            (int)Voice.M2,
            (int)Voice.M2,
            (int)Voice.M2,
            (int)Voice.M1,
            (int)Voice.M4,
            (int)Voice.M3,
            (int)Voice.M2,
            (int)Voice.M2,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            0,
            (int)Voice.M1,
            (int)Voice.M2,
            300,
            (int)Voice.M3,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.M3,
            (int)Voice.M5,
            (int)Voice.H1,
            (int)Voice.M7,
            (int)Voice._,
            (int)Voice.H1,
            (int)Voice.M7,
            (int)Voice._,
            (int)Voice.H1,
            0,
            (int)Voice.M7,
            (int)Voice.M6,
            (int)Voice.M5,
            300,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.M5,
            (int)Voice.M2,
            (int)Voice.M4,
            (int)Voice.M4,
            (int)Voice.M3,
            (int)Voice.M3,
            (int)Voice.M3,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.L5,
            (int)Voice.M4,
            (int)Voice.M3,
            (int)Voice.M2,
            (int)Voice.M3,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.M5,
            (int)Voice.M1,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            0,
            (int)Voice.M1,
            (int)Voice.M1,
            300,
            (int)Voice.M2,
            (int)Voice.M1,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.M1,
            (int)Voice.M5,
            (int)Voice.M1,
            (int)Voice.M4,
            700,
            0,
            (int)Voice.M4,
            (int)Voice.M4,
            (int)Voice.M3,
            (int)Voice.M2,
            300,
            (int)Voice.M2,
            700,
            (int)Voice.M1,
            (int)Voice.M1,
            300,
            (int)Voice.M1,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.M6,
            (int)Voice.M5,
            (int)Voice.M5,
            (int)Voice.M5,
            (int)Voice.M4,
            (int)Voice.M4,
            (int)Voice.M3,
            (int)Voice.M2,
            (int)Voice.M2,
            (int)Voice.M2,
            (int)Voice._,
            (int)Voice._,
            (int)Voice._,
            (int)Voice.M5,
            (int)Voice.M5,
            0,
            (int)Voice.M4,
            (int)Voice.M4,
            300,
            (int)Voice.M4,
            300,
            (int)Voice.M4,
            (int)Voice.M3,
            (int)Voice.M2,
            (int)Voice.M2,
            (int)Voice.M1,
            0,
            (int)Voice.M1,
            (int)Voice.L7,
            300,
            (int)Voice.M1,
            300,
            (int)Voice._,
            (int)Voice._,
        ];

        foreach (int i in spring)
        {
            switch (i)
            {
                case 300:
                    sleep = 300;

                    continue;
                case 0:
                    sleep = 150;

                    continue;
                case 700:
                    await Task.Delay(150);

                    continue;
                case (int)Voice._:
                    await Task.Delay(300);

                    continue;
                case 1000:
                    tmp = +5;

                    continue;
                default:
                    // 发送音符
                    output.Send([0x90, (byte)(i + tmp), volume], 0, 3, 0);
                    await Task.Delay(sleep);

                    break;
            }
        }

        await output.CloseAsync();
    }
}
